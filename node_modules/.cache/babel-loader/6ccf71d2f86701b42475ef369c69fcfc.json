{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer as Buffer$1 } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (Buffer$1.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer$1.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer$1.from(arr);\n  }\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function () {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nconst version$2 = \"logger/5.6.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nconst HEX = \"0123456789abcdef\";\n\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n\n          break;\n        }\n\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n  static from(version) {\n    return new Logger(version);\n  }\n\n}\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.6.0\";\nconst logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst version = \"sha2/5.6.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer$1.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer$1);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer$1.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer$1.concat([fromPublicKey.toBuffer(), Buffer$1.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer$1.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer$1.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer$1.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer$1.concat([buffer, programId.toBuffer(), Buffer$1.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer$1.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer$1.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer$1.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer$1.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer$1.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer$1.alloc(PACKET_DATA_SIZE);\n    Buffer$1.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer$1.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer$1.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer$1.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer$1.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer$1.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer$1.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer$1.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer$1.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Default (empty) signature\n */\n\n\nconst DEFAULT_SIGNATURE = Buffer$1.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer$1.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref2 => {\n        let {\n          publicKey\n        } = _ref2;\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      items[_key4] = arguments[_key4];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref3 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref3;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      signers[_key6] = arguments[_key6];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      signers[_key7] = arguments[_key7];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      signers[_key8 - 1] = arguments[_key8];\n    }\n\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer$1.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer$1.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer$1.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref4, index) => {\n      let {\n        signature\n      } = _ref4;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer$1.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer$1.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\n\nvar browser = {};\nObject.defineProperty(browser, \"__esModule\", {\n  value: true\n});\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\n\nfunction toBigIntLE(buf) {\n  {\n    const reversed = Buffer.from(buf);\n    reversed.reverse();\n    const hex = reversed.toString('hex');\n\n    if (hex.length === 0) {\n      return BigInt(0);\n    }\n\n    return BigInt(`0x${hex}`);\n  }\n}\n\nvar toBigIntLE_1 = browser.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\n\nfunction toBigIntBE(buf) {\n  {\n    const hex = buf.toString('hex');\n\n    if (hex.length === 0) {\n      return BigInt(0);\n    }\n\n    return BigInt(`0x${hex}`);\n  }\n}\n\nbrowser.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\n\nfunction toBufferLE(num, width) {\n  {\n    const hex = num.toString(16);\n    const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    buffer.reverse();\n    return buffer;\n  }\n}\n\nvar toBufferLE_1 = browser.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\n\nfunction toBufferBE(num, width) {\n  {\n    const hex = num.toString(16);\n    return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n  }\n}\n\nbrowser.toBufferBE = toBufferBE;\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE_1(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE_1(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer$1.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer$1.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer$1.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n/**\n * Compute Budget Instruction class\n */\n\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar browserPonyfill = {\n  exports: {}\n};\n\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n\n    F.prototype = global;\n    return new F();\n  }();\n\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n\n        return name.toLowerCase();\n      }\n\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n\n        return value;\n      } // Build a destructive iterator for the value list\n\n\n      function iteratorFor(items) {\n        var iterator = {\n          next: function () {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n\n        return iterator;\n      }\n\n      function Headers(headers) {\n        this.map = {};\n\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n\n        body.bodyUsed = true;\n      }\n\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n\n        return chars.join('');\n      }\n\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n\n      function Body() {\n        this.bodyUsed = false;\n\n        this._initBody = function (body) {\n          this._bodyInit = body;\n\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.\n\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n\n            if (rejected) {\n              return rejected;\n            }\n\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n\n        this.text = function () {\n          var rejected = consumed(this);\n\n          if (rejected) {\n            return rejected;\n          }\n\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n\n        return this;\n      } // HTTP methods whose capitalization should be normalized\n\n\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n\n          this.url = input.url;\n          this.credentials = input.credentials;\n\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n\n        this._initBody(body);\n      }\n\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n\n      Body.call(Request.prototype);\n\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n\n        this._initBody(bodyInit);\n      }\n\n      Body.call(Response.prototype);\n\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n\n      var redirectStatuses = [301, 302, 303, 307, 308];\n\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n\n      exports.DOMException = self.DOMException;\n\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n\n          var xhr = new XMLHttpRequest();\n\n          function abortXhr() {\n            xhr.abort();\n          }\n\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n\n          xhr.open(request.method, request.url, true);\n\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n\n      fetch.polyfill = true;\n\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n\n  __self__.fetch.ponyfill = true; // Remove \"polyfill\" property added by whatwg-fetch\n\n  delete __self__.fetch.polyfill; // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n\n  var ctx = __self__; // this line disable service worker support temporarily\n\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\n\nvar crossFetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer$1), RawAccountDataResult, value => Buffer$1.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : crossFetch;\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url, options) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) => resolve([modifiedUrl, modifiedOptions]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer$1), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitment) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(_ref5 => {\n        let {\n          transaction,\n          meta\n        } = _ref5;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get block height information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new Error('failed to get block production information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n\n\n  async getTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(_ref6 => {\n        let {\n          transaction,\n          meta\n        } = _ref6;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(_ref7 => {\n        let {\n          transaction,\n          meta\n        } = _ref7;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction({\n        recentBlockhash: originalTx.recentBlockhash,\n        nonceInfo: originalTx.nonceInfo,\n        feePayer: originalTx.feePayer,\n        signatures: [...originalTx.signatures]\n      });\n      transaction.instructions = transactionOrMessage.instructions;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketGeneration++;\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref8 => {\n      let [hash, subscription] = _ref8;\n      this._subscriptionsByHash[hash] = { ...subscription,\n        state: 'pending'\n      };\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'subscribing'\n              };\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._subscriptionsByHash[hash] = { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              };\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'pending'\n              };\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._subscriptionsByHash[hash] = { ...subscription,\n                  state: 'unsubscribing'\n                };\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._subscriptionsByHash[hash] = { ...subscription,\n                    state: 'subscribed'\n                  };\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'unsubscribed'\n              };\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer$1.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer$1.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer$1.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer$1.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer$1.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer$1.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer$1.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter(_ref9) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref9;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref10) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref10;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref11) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref11;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n/**\n * Vote account info\n */\n\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction-constants.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","../node_modules/bigint-buffer/dist/browser.js","../node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/compute-budget.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"names":["toBuffer","arr","Buffer","assert","inherits_browserModule","require$$0","require$$1","utils","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","BlockHash","common","ft_1","ch32","maj32","s0_256","s1_256","g0_256","g1_256","shaCommon","require$$2","require$$3","SHA256","SHA512","require$$4","version","constructor","Object","encode","serialize","decode","deserialize","decodeUnchecked","deserializeUnchecked","enum","key","SOLANA_SCHEMA","MAX_SEED_LENGTH","value","PublicKey","_bn","isPublicKeyData","decoded","bs58","default","equals","publicKey","toBase58","toJSON","toBytes","b","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","hash","sha256","createProgramAddressSync","seeds","seed","publicKeyBytes","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","address","err","findProgramAddress","isOnCurve","pubkey","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","data","chars","str","authorized","lockup","voteInit","alloc","type","item","len","size","elem","bytes","rem_len","PUBKEY_LENGTH","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","args","account","ix","isAccountSigner","index","isAccountWritable","isProgramId","programIds","nonProgramIds","numKeys","keyCount","shortvec","instruction","programIdIndex","Array","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","length","signDataLayout","Layout","transaction","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","signData","from","byteArray","accountCount","i","dataSlice","messageArgs","message","DEFAULT_SIGNATURE","opts","isWritable","signatures","signature","feePayer","nonceInfo","_message","_json","nonceInstruction","signers","add","items","compileMessage","JSON","console","accountMetas","accountMeta","isSigner","pubkeySorting","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","valid","pair","serializeMessage","getEstimatedFee","connection","setSigners","seen","sign","uniqueSigners","signer","partialSign","_partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","Message","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","maxRetries","status","resolve","setTimeout","toBigIntLE","toBufferLE","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","decodeInstructionType","instructionTypeLayout","typeIndex","layout","decodeCreateAccount","decodeData","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","decodeTransfer","lamports","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","space","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","expectedLength","Create","Assign","Transfer","u64","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","encodeData","params","transfer","BigInt","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","chunkSize","getMinNumSignatures","Math","load","balanceNeeded","programInfo","program","payer","sendAndConfirmTransaction","commitment","dataLayout","offset","array","transactions","bytesLength","bytesLengthPadding","REQUESTS_PER_SECOND","sleep","Promise","BPF_LOADER_PROGRAM_ID","decodeRequestUnits","additionalFee","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestHeapFrame","ComputeBudgetProgram","RequestUnits","RequestHeapFrame","requestUnits","requestHeapFrame","this","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","slot","epoch","nextPowerOfTwo","epochLen","slotIndex","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","getSlotsInEpoch","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","timeoutPromise","timeoutId","result","clearTimeout","url","useHttps","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","union","pick","jsonrpc","id","error","code","unknown","optional","any","UnknownRpcResult","createRpcResult","create","jsonRpcResult","context","number","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","jsonRpcResultAndContext","executable","owner","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","fetch","customFetch","fetchWithMiddleware","modifiedFetchArgs","fetchMiddleware","reject","clientBrowser","agent","method","body","headers","httpHeaders","too_many_requests_retries","waitTime","res","disableRetryOnRateLimit","statusText","text","callback","client","requests","batch","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","_commitment","_confirmTransactionInitialTimeout","_rpcEndpoint","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","commitmentOrConfig","wsEndpoint","makeWebsocketUrl","createRpcClient","createRpcRequest","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","rpcEndpoint","getBalanceAndContext","unsafeRes","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","config","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","filter","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","start","Date","subscriptionCommitment","response","confirmPromise","subscriptionId","timeoutMs","promiseTimeout","removeSignatureListener","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","getBlockHeight","getBlockProduction","rest","getTransaction","getParsedTransaction","getParsedTransactions","methodName","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","startSlot","highestConfirmedRoot","confirmedSignatureInfo","info","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","NonceAccount","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","originalTx","disableCache","encodedTransaction","traceIndent","logTrace","sendTransaction","sendRawTransaction","sendEncodedTransaction","_wsOnOpen","setInterval","_wsOnError","_wsOnClose","clearInterval","_updateSubscriptions","activeWebSocketGeneration","isCurrentConnectionStillActive","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbacks","cb","_wsOnAccountNotification","_makeSubscription","clientSubscriptionId","fastStableStringify","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","filters","undefined","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_wsOnSlotUpdatesNotification","onSlotUpdate","removeSlotUpdateListener","_unsubscribeClientSubscription","dispose","subscriptionName","_buildArgs","override","_buildArgsAtLeastConfirmed","_wsOnSignatureNotification","onSignature","notification","onSignatureWithOptions","_wsOnRootNotification","onRootChange","removeRootChangeListener","generate","fromSecretKey","keypair","encoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","Keypair","STAKE_CONFIG_ID","staker","withdrawer","Lockup","unixTimestamp","custodian","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","ecdsaSign","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","ethAddress","createInstructionWithEthAddress","rawAddress","dataStart","ethAddressOffset","ethAddressInstructionIndex","recoveryId","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","getPriorVoters","authorizedVoter","targetEpoch","isEmpty","buf","idx","decodeInitializeAccount","VOTE_INSTRUCTION_LAYOUTS","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","InitializeAccount","VoteAuthorizationLayout","Voter","initializeAccount","endpoint","http","devnet","testnet","https","tls","cluster","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {u64} from '@solana/buffer-layout-utils';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'RequestUnits' | 'RequestHeapFrame';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n\n  /** Additional fee to pay */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport crossFetch from 'cross-fetch';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: typeof crossFetch,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : crossFetch;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: typeof crossFetch;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction({\n        recentBlockhash: originalTx.recentBlockhash,\n        nonceInfo: originalTx.nonceInfo,\n        feePayer: originalTx.feePayer,\n        signatures: [...originalTx.signatures],\n      });\n      transaction.instructions = transactionOrMessage.instructions;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}